// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using MoFaim.Models;
using Refit;
using System.Net;
using System.Text;
using System.Threading.Tasks;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace RefitInternalGenerated
{
    [ExcludeFromCodeCoverage]
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

namespace MoFaim.Services
{
    using RefitInternalGenerated;

    /// <inheritdoc />
    [ExcludeFromCodeCoverage]
    [DebuggerNonUserCode]
    [Preserve]
    partial class AutoGeneratedIMoFaimApi : IMoFaimApi        {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIMoFaimApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        public virtual Task<ApiResponse<AuthenticateUser>> ValidateUser(UserDTO userDTO)
        {
            var arguments = new object[] { userDTO };
            var func = requestBuilder.BuildRestResultFuncForMethod("ValidateUser", new Type[] { typeof(UserDTO) });
            return (Task<ApiResponse<AuthenticateUser>>)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<ApiResponse<AuthenticateUser>> RegisterUser(UserDTO userDTO)
        {
            var arguments = new object[] { userDTO };
            var func = requestBuilder.BuildRestResultFuncForMethod("RegisterUser", new Type[] { typeof(UserDTO) });
            return (Task<ApiResponse<AuthenticateUser>>)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<ApiResponse<IEnumerable<Restaurants>>> GetRestaurants(string authorization)
        {
            var arguments = new object[] { authorization };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetRestaurants", new Type[] { typeof(string) });
            return (Task<ApiResponse<IEnumerable<Restaurants>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<ApiResponse<IEnumerable<MenuItems>>> GetMenuItems(string authorization)
        {
            var arguments = new object[] { authorization };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetMenuItems", new Type[] { typeof(string) });
            return (Task<ApiResponse<IEnumerable<MenuItems>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<ApiResponse<IEnumerable<UserDTO>>> GetUsers(string authorization)
        {
            var arguments = new object[] { authorization };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUsers", new Type[] { typeof(string) });
            return (Task<ApiResponse<IEnumerable<UserDTO>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<ApiResponse<bool>> RateRestaurant(UserRatingDto userRatingDto)
        {
            var arguments = new object[] { userRatingDto };
            var func = requestBuilder.BuildRestResultFuncForMethod("RateRestaurant", new Type[] { typeof(UserRatingDto) });
            return (Task<ApiResponse<bool>>)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<string[]> TestApi()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("TestApi", new Type[] {  });
            return (Task<string[]>)func(Client, arguments);
        }

    }
}
